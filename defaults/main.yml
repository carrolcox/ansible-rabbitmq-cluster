---

update_hosts: false

erlang_apt_repo_keyid: "6026DFCA"
erlang_apt_repo_key: "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc"
erlang_apt_repo_string: "deb http://dl.bintray.com/rabbitmq-erlang/debian {{ ansible_distribution_release }} erlang"

erlang_packages:
  - erlang-nox

rabbitmq_apt_repo_keyid: "{{ erlang_apt_repo_keyid }}"
rabbitmq_apt_repo_key: "{{ erlang_apt_repo_key }}"
rabbitmq_apt_repo_string: "deb https://dl.bintray.com/rabbitmq/debian {{ ansible_distribution_release }} main"

rabbitmq_packages:
  - rabbitmq-server

# cluster
rabbitmq_create_cluster: yes
# Erlang cookie is just a string of alphanumeric characters up to 255 chars
rabbitmq_erlang_cookie: 00000000000000000000
# https://www.rabbitmq.com/configure.html#define-environment-variables
# When set to true this will cause RabbitMQ to use fully qualified names to identify nodes.
# This may prove useful on EC2.
# Note that it is not possible to switch between using short and long names without resetting the node.
rabbitmq_use_longname: 'false'

# log rotate
rabbitmq_logrotate_period: weekly
rabbitmq_logrotate_amount: 20

# https://www.rabbitmq.com/install-debian.html
# The main setting that needs adjustment is the max number of open files, also known as ulimit -n.
# The default value on many operating systems is too low for a messaging broker (eg. 1024 on several Linux distributions).
# We recommend allowing for at least 65536 file descriptors for user rabbitmq in production environments.
# 4096 should be sufficient for most development workloads
rabbitmq_ulimit_open_files: 4096

# default ports
rabbitmq_tls_port: 5671
rabbitmq_amqp_port: 5672
rabbitmq_epmd_port: 4369
rabbitmq_node_port: 25672

# plugins for HTTP API monitor
rabbitmq_plugins:
  - rabbitmq_management
  - rabbitmq_management_agent
  - rabbitmq_shovel
  - rabbitmq_shovel_management

# TLS/SSL support
enable_tls: false
# if true, only tls is supported which means amqp default port 5672 is not open anymore
tls_only: false

tls_verify: "verify_none"
tls_fail_if_no_peer_cert: false

cacertfile: ""
cacertfile_dest: "/etc/rabbitmq/cacert.pem"

certfile: ""
certfile_dest: "/etc/rabbitmq/cert.pem"

keyfile: ""
keyfile_dest: "/etc/rabbitmq/key.pem"

# By default, queues within a RabbitMQ cluster are located on a single node (the node on which they were first declared).
# Queues can optionally be made mirrored across all nodes, or exactly N number of nodes
# By enabling this variable to true, there will be 1 queue master and 1 queue mirror.
# If the node running the queue master becomes unavailable, the queue mirror will be automatically promoted to master.
backup_queues_in_two_nodes: false
